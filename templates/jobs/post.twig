{% extends "_layout.twig" %}

{% block title %}Post a New Job Â· {{ siteName }}{% endblock %}

{% block content %}
  {% set entry = entry ?? null %}
  {% set currentUser = currentUser %}

  {# Handle continuing from a draft #}
  {% set continueFromId = craft.app.request.getParam('continueFrom') %}
  {% if continueFromId and not entry and currentUser %}
    {% set entry = craft.entries().section('jobs').id(continueFromId).authorId(currentUser.id).one() %}
  {% endif %}

  {# Check if current user is a recruiter #}
  {% set userOrg = currentUser ? currentUser.organization.one() : null %}
  {% set isRecruiter = userOrg and userOrg.organizationType == 'recruiter' %}

  {# Check if we just created a new school #}
  {% set newSchoolId = craft.app.request.getParam('newSchoolId') %}
  {% set newlyCreatedSchool = newSchoolId ? craft.entries().id(newSchoolId).one() : null %}

  {# Get all schools (organizations with type 'school') for recruiter dropdown #}
  {% set schools = craft.entries().section('organizations').organizationType('school').orderBy('title asc').all() %}

  {# Get section/type IDs for creating new organizations #}
  {% set orgSample = craft.entries().section('organizations').one() %}
  {% set orgSectionId = orgSample ? orgSample.sectionId : null %}
  {% set orgEntryTypeId = orgSample ? orgSample.typeId : null %}

  {# Get options for new school form #}
  {% set countryOptions = craft.projectTools.options('country') %}
  {% set stateOptions = craft.projectTools.options('state') %}

  <div class="container" style="max-width: 800px;">
    <div class="row">
      <div class="col-12">
        {% if not currentUser %}
          <!-- Account Required Message -->
          <div class="text-center pb-5">
            <div class="mb-4">
              <i class="bi bi-person-circle text-primary" style="font-size: 4rem;"></i>
            </div>
            <h2 class="h4 mb-3">Account Required</h2>
            <p class="text-muted mb-4 lead">
              To post a job opening on Blue Green Sheet, you need to create an account or sign in to your existing account.
            </p>

            <div class="row justify-content-center mb-4">
              <div class="col-md-8">
                <div class="card border-0 bg-light">
                  <div class="card-body p-4">
                    <h5 class="h6 mb-3">What you'll be able to do:</h5>
                    <ul class="list-unstyled text-start">
                      <li class="mb-2"><i class="bi bi-check-circle-fill text-success me-2"></i>Post job openings for 6 or 12 months</li>
                      <li class="mb-2"><i class="bi bi-check-circle-fill text-success me-2"></i>Reach qualified educational professionals</li>
                      <li class="mb-2"><i class="bi bi-check-circle-fill text-success me-2"></i>Edit your postings anytime</li>
                      <li class="mb-2"><i class="bi bi-check-circle-fill text-success me-2"></i>Upload job attachments and documents</li>
                    </ul>
                  </div>
                </div>
              </div>
            </div>

            <div class="d-flex gap-3 justify-content-center flex-wrap">
              <a href="{{ url('login') }}" class="button button-xlarge rounded-pill px-4">
                <i class="bi bi-box-arrow-in-right me-2"></i>Sign In to Existing Account
              </a>
              <a href="{{ url('register') }}" class="button button-xlarge rounded-pill button-border px-4">
                <i class="bi bi-person-plus me-2"></i>Create New Account
              </a>
            </div>

            <div class="mt-4">
              <p class="text-muted small">
                Already have an account? <a href="{{ url('login') }}" class="text-decoration-none">Sign in here</a><br>
                Questions about posting jobs? <a href="{{ url('pricing') }}" class="text-decoration-none">View our pricing</a>
              </p>
            </div>
          </div>

        {% elseif not currentUser.isInGroup('jobPosters') and not currentUser.admin and not currentUser.isInGroup('bgsStaff') %}
          <!-- Permission Required Message -->
          <div class="text-center py-5">
            <div class="mb-4">
              <i class="bi bi-shield-exclamation text-warning" style="font-size: 4rem;"></i>
            </div>
            <h2 class="h4 mb-3">Access Restricted</h2>
            <p class="text-muted mb-4 lead">
              Your account doesn't have permission to post jobs. Please contact us if you need access to post job openings.
            </p>
            <a href="{{ url('contact') }}" class="button button-xlarge button-rounded px-4">
              <i class="bi bi-envelope me-2"></i>Contact Us
            </a>
          </div>

        {% else %}
          <!-- Authorized User - Show Job Posting Form -->

        {# Check if user's organization has required location data #}
        {% set skipJobForm = false %}
        {% if userOrg %}
          {% set hasLocation = false %}
          {% if userOrg.country == 'unitedStates' %}
            {% set hasLocation = userOrg.orgCity and userOrg.orgState %}
          {% elseif userOrg.country == 'international' %}
            {% set hasLocation = userOrg.orgLocation %}
          {% endif %}

          {% if not hasLocation %}
            <!-- Organization Missing Location Data -->
            <div class="alert alert-warning">
              <h4 class="alert-heading"><i class="bi bi-exclamation-triangle me-2"></i>Location Information Required</h4>
              <p>Your organization is missing required location information. Please update your organization profile before posting jobs.</p>
              <a href="{{ url('profile/edit-organization') }}" class="btn btn-primary">
                <i class="bi bi-pencil me-2"></i>Edit My Organization
              </a>
              <a href="{{ url('profile') }}" class="btn btn-outline-secondary ms-2">
                <i class="bi bi-arrow-left me-2"></i>Back to Profile
              </a>
            </div>
            {% set skipJobForm = true %}
          {% endif %}
        {% endif %}

        {% if not skipJobForm %}
        {% if entry and entry.getErrors() %}
          <div class="alert alert-danger">
            <strong>We couldn't save your job posting.</strong>
            <ul class="mb-0">
              {% for attr, errs in entry.getErrors() %}
                {% for err in errs %}
                  <li>{{ err }}</li>
                {% endfor %}
              {% endfor %}
            </ul>
          </div>
        {% endif %}
        <h1 class="h3 mb-4">
          {% if entry and entry.id %}
            Complete Your Job Posting
          {% else %}
            Post a New Job Opening
          {% endif %}
        </h1>
        <form method="post" class="" enctype="multipart/form-data" novalidate>
          {{ csrfInput() }}
          {{ actionInput('entries/save-entry') }}
          {% set jobsSection = craft.entries.section('jobs').one().section %}
          {{ hiddenInput('sectionId', jobsSection.id) }}
          {{ hiddenInput('typeId', jobsSection.entryTypes[0].id) }}
          {% if entry and entry.id %}
            {{ hiddenInput('entryId', entry.id) }}
          {% endif %}
          {{ hiddenInput('enabled', false) }} {# Keep disabled until payment #}
          {{ hiddenInput('fields[paid]', false) }} {# Default to unpaid #}
          <input type="hidden" name="redirect" id="redirectInput" value="{{ url('jobs/payment') }}">
          {{ hiddenInput('draftRedirect', url('profile')) }}

          <!-- Job Title -->
          <div class="mb-4">
            <label for="title" class="form-label fw-bold">Job Title <span class="text-danger">*</span></label>
            <input
              type="text"
              id="title"
              name="title"
              class="form-control{% if entry and entry.getErrors('title') %} is-invalid{% endif %}"
              value="{{ (entry ? entry.title : '')|e }}"
              placeholder="e.g., Head of School, Business Manager, Development Director"
            >
            {% if entry and entry.getErrors('title') %}
              <div class="invalid-feedback">
                {{ entry.getErrors('title')|join(', ') }}
              </div>
            {% endif %}
          </div>

          <!-- School Selection (Recruiters Only) -->
          {% if isRecruiter %}
            <div class="mb-4">
              <label for="schoolSelect" class="form-label fw-bold">School/Organization <span class="text-danger">*</span></label>
              <select
                id="schoolSelect"
                name="fields[school][]"
                class="form-select{% if entry and entry.getErrors('school') %} is-invalid{% endif %}"
              >
                <option value="">Select the school for this position...</option>
                {% for school in schools %}
                  {% set isSelected = false %}
                  {% if entry and entry.school %}
                    {% for selectedSchool in entry.school.all() %}
                      {% if selectedSchool.id == school.id %}
                        {% set isSelected = true %}
                      {% endif %}
                    {% endfor %}
                  {% elseif newlyCreatedSchool and newlyCreatedSchool.id == school.id %}
                    {# Pre-select the newly created school #}
                    {% set isSelected = true %}
                  {% endif %}
                  <option value="{{ school.id }}"
                          data-country="{{ school.country }}"
                          data-city="{{ school.orgCity }}"
                          data-state="{{ school.orgState }}"
                          data-location="{{ school.orgLocation }}"
                          {% if isSelected %}selected{% endif %}>
                    {{ school.title }}
                    {% if school.orgCity and school.orgState %}
                      ({{ school.orgCity }}, {{ school.orgState }})
                    {% elseif school.orgLocation %}
                      ({{ school.orgLocation }})
                    {% endif %}
                  </option>
                {% endfor %}
              </select>
              {% if entry and entry.getErrors('school') %}
                <div class="invalid-feedback">
                  {{ entry.getErrors('school')|join(', ') }}
                </div>
              {% endif %}

              <!-- Add New School Link -->
              <div class="mt-2">
                <button type="button" class="button rounded-pill button-border mt-3"
                        data-bs-toggle="collapse" data-bs-target="#addSchoolCollapse"
                        aria-expanded="false" aria-controls="addSchoolCollapse">
                  <i class="bi bi-plus-circle me-1"></i>School not listed? Click here to add one
                </button>
              </div>

              <!-- Inline Add New School Form (Collapsed) -->
              <div id="addSchoolCollapse" class="collapse mt-3">
                <div class="card">
                  <div class="card-header">
                    <h6 class="mb-0"><i class="bi bi-building me-2"></i>Add New School</h6>
                  </div>
                  <div class="card-body bg-light">
                    {% if not orgSectionId or not orgEntryTypeId %}
                      <div class="alert alert-warning mb-0">Unable to add new school at this time. Please contact support.</div>
                    {% else %}
                      <p class="text-muted small mb-3">
                        <i class="bi bi-info-circle me-1"></i>Fill out the school information below. Your job posting will be saved and you can continue afterward.
                      </p>

                      <div id="newSchoolFields">
                        <div class="mb-3">
                          <label for="newSchoolName" class="form-label">School Name <span class="text-danger">*</span></label>
                          <input type="text" id="newSchoolName" class="form-control" placeholder="Enter school name">
                        </div>

                        <div class="mb-3">
                          <label for="newSchoolWebsite" class="form-label">Website</label>
                          <input type="text" id="newSchoolWebsite" class="form-control" placeholder="example.com or https://example.com">
                        </div>

                        <div class="mb-3">
                          <label for="newSchoolCountry" class="form-label">Country <span class="text-danger">*</span></label>
                          <select id="newSchoolCountry" class="form-select">
                            <option value="">â Select â</option>
                            {% for opt in countryOptions %}
                              <option value="{{ opt.value }}">{{ opt.label }}</option>
                            {% endfor %}
                          </select>
                        </div>

                        <!-- US Fields -->
                        <div id="newSchoolUSFields" style="display:none;">
                          <div class="row g-3">
                            <div class="col-md-6">
                              <label for="newSchoolCity" class="form-label">City <span class="text-danger">*</span></label>
                              <input type="text" id="newSchoolCity" class="form-control">
                            </div>
                            <div class="col-md-6">
                              <label for="newSchoolState" class="form-label">State <span class="text-danger">*</span></label>
                              <select id="newSchoolState" class="form-select">
                                <option value="">â Select â</option>
                                {% for opt in stateOptions %}
                                  <option value="{{ opt.value }}">{{ opt.label }}</option>
                                {% endfor %}
                              </select>
                            </div>
                          </div>
                        </div>

                        <!-- International Fields -->
                        <div id="newSchoolIntlFields" style="display:none;">
                          <div class="mb-3">
                            <label for="newSchoolLocation" class="form-label">Location (City / Country) <span class="text-danger">*</span></label>
                            <input type="text" id="newSchoolLocation" class="form-control" placeholder="London, United Kingdom">
                          </div>
                        </div>

                        <!-- Logo Upload -->
                        <div class="mb-3">
                          <label for="newSchoolLogo" class="form-label">Logo</label>
                          <input type="file" id="newSchoolLogo" class="form-control" accept="image/*">
                          <div class="form-text">Upload your school's logo (optional)</div>
                        </div>

                        <div class="d-grid gap-2 d-sm-flex mt-3">
                          <button type="button" class="button rounded-pill" id="saveNewSchoolBtn">
                            <i class="bi bi-check-circle me-1"></i>Save School & Continue
                          </button>
                          <button type="button" class="button rounded-pill button-border"
                                  data-bs-toggle="collapse" data-bs-target="#addSchoolCollapse">
                            Cancel
                          </button>
                        </div>
                      </div>
                    {% endif %}
                  </div>
                </div>
              </div>
            </div>
          {% endif %}

          <!-- Job Category -->
          <div class="mb-4">
            <label for="jobCategory" class="form-label fw-bold">Job Category <span class="text-danger">*</span></label>
            <select
              id="jobCategory"
              name="fields[jobCategory][]"
              class="form-select{% if entry and entry.getErrors('jobCategory') %} is-invalid{% endif %}"
            >
              <option value="">Select a category...</option>
              {% for category in craft.categories().group('jobCategories').all() %}
                {% set isSelected = false %}
                {% if entry and entry.jobCategory %}
                  {% for selectedCategory in entry.jobCategory.all() %}
                    {% if selectedCategory.id == category.id %}
                      {% set isSelected = true %}
                    {% endif %}
                  {% endfor %}
                {% endif %}
                <option value="{{ category.id }}" {% if isSelected %}selected{% endif %}>
                  {{ category.title }}
                </option>
              {% endfor %}
            </select>
            {% if entry and entry.getErrors('jobCategory') %}
              <div class="invalid-feedback">
                {{ entry.getErrors('jobCategory')|join(', ') }}
              </div>
            {% endif %}
          </div>

          <!-- Job Description (Rich Text) -->
          <div class="mb-4">
            <label for="jobDescription" class="form-label fw-bold">Job Description <span class="text-danger">*</span></label>
            <div id="jobDescription-editor" style="min-height: 300px; border: 1px solid #ced4da; border-radius: 0.375rem;"></div>
            <textarea
              id="jobDescription"
              name="fields[jobDescription]"
              class="d-none{% if entry and entry.getErrors('jobDescription') %} is-invalid{% endif %}"
            >{{ entry ? entry.jobDescription : '' }}</textarea>
            {% if entry and entry.getErrors('jobDescription') %}
              <div class="invalid-feedback">
                {{ entry.getErrors('jobDescription')|join(', ') }}
              </div>
            {% endif %}
          </div>

          <!-- Opportunity Statement (Rich Text) -->
          <div class="mb-4">
            <label for="jobOpportunityStatement" class="form-label fw-bold">Opportunity Statement</label>
            <div class="form-text mb-2">Optional: Highlight what makes this opportunity special</div>
            <div id="jobOpportunityStatement-editor" style="min-height: 200px; border: 1px solid #ced4da; border-radius: 0.375rem;"></div>
            <textarea
              id="jobOpportunityStatement"
              name="fields[jobOpportunityStatement]"
              class="d-none"
            >{{ entry ? entry.jobOpportunityStatement : '' }}</textarea>
          </div>

          <!-- Salary Range -->
          <div class="row mb-4">
            <div class="col-md-6">
              <label for="jobSalaryLow" class="form-label fw-bold">Salary Range - Low</label>
              <div class="input-group">
                <span class="input-group-text">$</span>
                <input
                  type="number"
                  id="jobSalaryLow"
                  name="fields[jobSalaryLow]"
                  class="form-control"
                  value="{{ entry ? entry.jobSalaryLow : '' }}"
                  placeholder="75000"
                  min="0"
                  step="1000"
                >
              </div>
            </div>
            <div class="col-md-6">
              <label for="jobSalaryHigh" class="form-label fw-bold">Salary Range - High</label>
              <div class="input-group">
                <span class="input-group-text">$</span>
                <input
                  type="number"
                  id="jobSalaryHigh"
                  name="fields[jobSalaryHigh]"
                  class="form-control"
                  value="{{ entry ? entry.jobSalaryHigh : '' }}"
                  placeholder="125000"
                  min="0"
                  step="1000"
                >
              </div>
            </div>
          </div>

          <!-- School Website -->
          <div class="mb-4">
            <label for="jobSchoolUrl" class="form-label fw-bold">School Website</label>
            <input
              type="text"
              id="jobSchoolUrl"
              name="fields[jobSchoolUrl][value]"
              class="form-control"
              value="{{ entry and entry.jobSchoolUrl ? entry.jobSchoolUrl.url : '' }}"
              placeholder="www.yourschool.edu"
            >
            {{ hiddenInput('fields[jobSchoolUrl][type]', 'url') }}
          </div>

          <!-- Hidden Location Fields (Auto-populated from school/organization) -->
          <input type="hidden" id="hiddenCountry" name="fields[country]" value="{{ entry ? entry.country : '' }}">
          <input type="hidden" id="hiddenJobCity" name="fields[jobCity]" value="{{ entry ? entry.jobCity : '' }}">
          <input type="hidden" id="hiddenJobState" name="fields[jobState]" value="{{ entry ? entry.jobState : '' }}">
          <input type="hidden" id="hiddenJobLocation" name="fields[jobLocation]" value="{{ entry ? entry.jobLocation : '' }}">

          <!-- Application Instructions -->
          <div class="mb-4">
            <label for="jobApplicationInstructions" class="form-label fw-bold">Application Instructions <span class="text-danger">*</span></label>
            <textarea
              id="jobApplicationInstructions"
              name="fields[jobApplicationInstructions]"
              class="form-control{% if entry and entry.getErrors('jobApplicationInstructions') %} is-invalid{% endif %}"
              rows="4"
              placeholder="How should candidates apply? Include contact information, required documents, application deadlines, etc."
            >{{ entry ? entry.jobApplicationInstructions : '' }}</textarea>
            {% if entry and entry.getErrors('jobApplicationInstructions') %}
              <div class="invalid-feedback">
                {{ entry.getErrors('jobApplicationInstructions')|join(', ') }}
              </div>
            {% endif %}
          </div>

          <!-- Job Attachments -->
          <div class="mb-4">
            <label class="form-label fw-bold">Job Attachments <span class="text-muted">(Optional)</span></label>
            <p class="form-text text-muted mb-2">Upload up to 3 documents (PDF or Word format, max 10MB each)</p>

            <div id="attachmentsList" class="mb-3">
              <!-- Existing attachments will be displayed here -->
              {% if entry and entry.jobAttachments %}
                {% for attachment in entry.jobAttachments.all() %}
                  <div class="attachment-item d-flex align-items-center mb-2 p-2 border rounded" data-asset-id="{{ attachment.id }}">
                    <i class="fas fa-file-pdf text-danger me-2"></i>
                    <span class="me-auto">{{ attachment.filename }}</span>
                    <button type="button" class="btn btn-sm btn-outline-danger remove-attachment" onclick="removeAttachment(this)">
                      <i class="fas fa-times"></i>
                    </button>
                    <input type="hidden" name="fields[jobAttachments][]" value="{{ attachment.id }}">
                  </div>
                {% endfor %}
              {% endif %}
            </div>

            <div class="upload-area border-2 border-dashed rounded p-4 text-center" id="uploadArea" style="border-color: #dee2e6;">
              <i class="fas fa-cloud-upload-alt fa-2x text-muted mb-2"></i>
              <p class="mb-2">Drop files here or <button type="button" class="btn btn-link p-0" id="browseFiles">browse</button></p>
              <small class="text-muted">Accepted formats: PDF, DOC, DOCX | Maximum: 3 files, 10MB each</small>
              <input
                type="file"
                id="jobAttachments"
                name="attachmentFiles[]"
                class="d-none"
                multiple
                accept=".pdf,.doc,.docx"
              >
            </div>

            {% if entry and entry.getErrors('jobAttachments') %}
              <div class="invalid-feedback d-block">
                {{ entry.getErrors('jobAttachments')|join(', ') }}
              </div>
            {% endif %}
          </div>

          <!-- Organization (automatically set) -->
          {% if userOrg %}
            {{ hiddenInput('fields[listingOrganization][]', userOrg.id) }}
            {# For schools posting jobs, also set the school field to their own organization #}
            {% if not isRecruiter %}
              {{ hiddenInput('fields[school][]', userOrg.id) }}
            {% endif %}
          {% else %}
            <!-- Debug: User has no organization, trying different access methods -->
            {{ hiddenInput('debug_user_id', currentUser.id) }}
            {% set orgQuery = currentUser.organization %}
            {% if orgQuery %}
              {{ hiddenInput('debug_org_query', 'exists') }}
              {% set orgResult = orgQuery.all() %}
              {% if orgResult|length %}
                {{ hiddenInput('fields[listingOrganization][]', orgResult[0].id) }}
                {{ hiddenInput('debug_org_found', orgResult[0].title) }}
              {% endif %}
            {% endif %}
          {% endif %}


          <div class="d-grid gap-2">
            <button type="submit" class="button button-large rounded-pill" id="continueToPayment">
              {% if entry and entry.id %}
                Complete & Continue to Payment
              {% else %}
                Continue to Payment
              {% endif %}
            </button>
            {% if not entry or not entry.id %}
              <button type="button" class="button button-large rounded-pill button-border" id="saveAsDraft">
                <i class="bi bi-save me-2"></i>Save as Draft
              </button>
            {% endif %}
            <a href="{{ url('jobs') }}" class="button button-small rounded-pill button-border">
              Cancel
            </a>
          </div>

          <!-- Hidden fields for draft handling -->
          <input type="hidden" name="submitType" id="submitType" value="payment">
        </form>

        {% endif %}{# end skipJobForm #}

        {% endif %}
      </div>
    </div>
  </div>

  {% if currentUser and (currentUser.isInGroup('jobPosters') or currentUser.isInGroup('bgsStaff') or currentUser.admin) %}
  <!-- CKEditor CDN -->
  <script src="https://cdn.ckeditor.com/ckeditor5/40.1.0/classic/ckeditor.js"></script>

  <!-- CKEditor Height Styling -->
  <style>
    .ck-editor__editable {
      min-height: 300px !important;
    }
    #jobOpportunityStatement-editor .ck-editor__editable {
      min-height: 200px !important;
    }
  </style>

  <script>
  document.addEventListener('DOMContentLoaded', function() {
    // Initialize CKEditor for rich text fields FIRST
    let jobDescriptionEditor, opportunityStatementEditor;

    ClassicEditor
      .create(document.querySelector('#jobDescription-editor'), {
        toolbar: ['heading', '|', 'bold', 'italic', 'link', 'bulletedList', 'numberedList', '|', 'outdent', 'indent', '|', 'undo', 'redo']
      })
      .then(editor => {
        jobDescriptionEditor = editor;
        // Sync with hidden textarea
        editor.model.document.on('change:data', () => {
          document.querySelector('#jobDescription').value = editor.getData();
        });
        // Load existing content
        const existingContent = document.querySelector('#jobDescription').value;
        if (existingContent) {
          editor.setData(existingContent);
        }
      })
      .catch(error => {
        console.error('CKEditor initialization failed:', error);
      });

    ClassicEditor
      .create(document.querySelector('#jobOpportunityStatement-editor'), {
        toolbar: ['heading', '|', 'bold', 'italic', 'link', 'bulletedList', 'numberedList', '|', 'outdent', 'indent', '|', 'undo', 'redo']
      })
      .then(editor => {
        opportunityStatementEditor = editor;
        // Sync with hidden textarea
        editor.model.document.on('change:data', () => {
          document.querySelector('#jobOpportunityStatement').value = editor.getData();
        });
        // Load existing content
        const existingContent = document.querySelector('#jobOpportunityStatement').value;
        if (existingContent) {
          editor.setData(existingContent);
        }
      })
      .catch(error => {
        console.error('CKEditor initialization failed:', error);
      });

    // Auto-populate location fields from school selection (for recruiters)
    const schoolSelect = document.getElementById('schoolSelect');
    if (schoolSelect) {
      schoolSelect.addEventListener('change', function() {
        const selectedOption = this.options[this.selectedIndex];

        if (!selectedOption || !selectedOption.value) {
          return; // No school selected
        }

        // Get location data from data attributes
        const schoolCountry = selectedOption.dataset.country;
        const schoolCity = selectedOption.dataset.city;
        const schoolState = selectedOption.dataset.state;
        const schoolLocation = selectedOption.dataset.location;

        // Validate school has location data
        const hasLocation = (schoolCountry === 'unitedStates' && schoolCity && schoolState) ||
                           (schoolCountry === 'international' && schoolLocation);

        if (!hasLocation) {
          alert('â ï¸ This school is missing location information.\n\nPlease contact support@bluegreensheet.com to have it updated.');
          this.value = ''; // Clear selection
          return;
        }

        // Populate hidden location fields
        document.getElementById('hiddenCountry').value = schoolCountry || '';
        document.getElementById('hiddenJobCity').value = schoolCity || '';
        document.getElementById('hiddenJobState').value = schoolState || '';
        document.getElementById('hiddenJobLocation').value = schoolLocation || '';
      });
    }

    // File upload functionality
    const jobAttachmentsInput = document.getElementById('jobAttachments');
    const browseFilesBtn = document.getElementById('browseFiles');
    const uploadArea = document.getElementById('uploadArea');
    const attachmentsList = document.getElementById('attachmentsList');
    const maxFiles = 3;
    const maxSize = 10 * 1024 * 1024; // 10MB in bytes
    let currentAttachments = [];

    // Initialize current attachments count
    const existingAttachments = attachmentsList.querySelectorAll('.attachment-item');
    currentAttachments = Array.from(existingAttachments);

    if (jobAttachmentsInput && browseFilesBtn && uploadArea) {
      // Browse files button click
      browseFilesBtn.addEventListener('click', function(e) {
        e.preventDefault();
        jobAttachmentsInput.click();
      });

      // File input change
      jobAttachmentsInput.addEventListener('change', function(e) {
        handleFileSelection(e.target.files);
      });

      // Drag and drop functionality
      uploadArea.addEventListener('dragover', function(e) {
        e.preventDefault();
        uploadArea.style.borderColor = '#0d6efd';
        uploadArea.style.backgroundColor = '#f8f9fa';
      });

      uploadArea.addEventListener('dragleave', function(e) {
        e.preventDefault();
        uploadArea.style.borderColor = '#dee2e6';
        uploadArea.style.backgroundColor = '';
      });

      uploadArea.addEventListener('drop', function(e) {
        e.preventDefault();
        uploadArea.style.borderColor = '#dee2e6';
        uploadArea.style.backgroundColor = '';
        handleFileSelection(e.dataTransfer.files);
      });
    }

    function handleFileSelection(files) {
      // Check total file count
      if (currentAttachments.length + files.length > maxFiles) {
        alert(`You can only upload up to ${maxFiles} files total. You currently have ${currentAttachments.length} file(s).`);
        return;
      }

      // Process each file
      for (let i = 0; i < files.length; i++) {
        const file = files[i];

        // Check file size
        if (file.size > maxSize) {
          alert(`File "${file.name}" is too large. Maximum file size is 10MB.`);
          continue;
        }

        // Check file type
        if (!file.name.match(/\.(pdf|doc|docx)$/i)) {
          alert(`File "${file.name}" is not a supported format. Please upload PDF, DOC, or DOCX files.`);
          continue;
        }

        // Add file to the list
        addAttachmentToList(file);
      }

      // Clear the input
      jobAttachmentsInput.value = '';
    }

    function addAttachmentToList(file) {
      const attachmentDiv = document.createElement('div');
      attachmentDiv.className = 'attachment-item d-flex align-items-center mb-2 p-2 border rounded';

      const fileIcon = getFileIcon(file.name);
      const fileSize = formatFileSize(file.size);

      attachmentDiv.innerHTML = `
        <i class="${fileIcon} me-2"></i>
        <div class="me-auto">
          <span>${file.name}</span>
          <small class="text-muted d-block">${fileSize}</small>
        </div>
        <button type="button" class="btn btn-sm btn-outline-danger remove-attachment" onclick="removeAttachment(this)">
          <i class="fas fa-times"></i>
        </button>
      `;

      // Create a hidden input for the file
      const fileInput = document.createElement('input');
      fileInput.type = 'file';
      fileInput.name = 'fields[jobAttachments][]';
      fileInput.className = 'd-none';
      fileInput.files = createFileList([file]);
      attachmentDiv.appendChild(fileInput);

      attachmentsList.appendChild(attachmentDiv);
      currentAttachments.push(attachmentDiv);
    }

    function getFileIcon(filename) {
      const ext = filename.split('.').pop().toLowerCase();
      switch(ext) {
        case 'pdf': return 'fas fa-file-pdf text-danger';
        case 'doc':
        case 'docx': return 'fas fa-file-word text-primary';
        default: return 'fas fa-file text-secondary';
      }
    }

    function formatFileSize(bytes) {
      if (bytes === 0) return '0 Bytes';
      const k = 1024;
      const sizes = ['Bytes', 'KB', 'MB', 'GB'];
      const i = Math.floor(Math.log(bytes) / Math.log(k));
      return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
    }

    function createFileList(files) {
      const dt = new DataTransfer();
      files.forEach(file => dt.items.add(file));
      return dt.files;
    }

    // Global function for removing attachments
    window.removeAttachment = function(button) {
      const attachmentItem = button.closest('.attachment-item');
      const index = currentAttachments.indexOf(attachmentItem);
      if (index > -1) {
        currentAttachments.splice(index, 1);
      }
      attachmentItem.remove();
    };

    // Auto-populate location for school users on page load
    {% if not isRecruiter and userOrg %}
      document.getElementById('hiddenCountry').value = '{{ userOrg.country }}';
      document.getElementById('hiddenJobCity').value = '{{ userOrg.orgCity }}';
      document.getElementById('hiddenJobState').value = '{{ userOrg.orgState }}';
      document.getElementById('hiddenJobLocation').value = '{{ userOrg.orgLocation }}';
    {% endif %}

    // Handle draft vs payment button clicks
    document.getElementById('continueToPayment').addEventListener('click', function() {
      document.getElementById('submitType').value = 'payment';
    });

    document.getElementById('saveAsDraft').addEventListener('click', function(e) {
      e.preventDefault(); // Prevent any default behavior
      e.stopPropagation(); // Stop event bubbling
      e.stopImmediatePropagation(); // Stop all other handlers

      console.log('Save as draft clicked');

      document.getElementById('submitType').value = 'draft';

      // For drafts, change redirect to profile
      const redirectInput = document.getElementById('redirectInput');
      if (redirectInput) {
        redirectInput.value = '{{ url("profile") }}';
      }

      // Ensure CKEditor content is synced before submission
      if (jobDescriptionEditor) {
        document.querySelector('#jobDescription').value = jobDescriptionEditor.getData();
      }
      if (opportunityStatementEditor) {
        document.querySelector('#jobOpportunityStatement').value = opportunityStatementEditor.getData();
      }

      // Force remove all Bootstrap validation classes and states
      const form = document.querySelector('form');
      form.classList.remove('was-validated');
      form.querySelectorAll('.is-valid, .is-invalid').forEach(el => {
        el.classList.remove('is-valid', 'is-invalid');
      });

      // Disable all validation by temporarily removing form attributes
      form.removeAttribute('novalidate');
      form.setAttribute('novalidate', 'novalidate');

      // Create form data manually to bypass any form validation
      const formData = new FormData();

      // Add essential form fields
      formData.append('CRAFT_CSRF_TOKEN', document.querySelector('input[name="CRAFT_CSRF_TOKEN"]').value);
      formData.append('action', 'entries/save-entry');
      formData.append('sectionId', document.querySelector('input[name="sectionId"]').value);
      formData.append('typeId', document.querySelector('input[name="typeId"]').value);
      formData.append('enabled', '0');
      formData.append('fields[paid]', '0');
      formData.append('redirect', '{{ url("profile") }}');
      formData.append('submitType', 'draft');

      // Add job data fields (only if they have values)
      const title = document.getElementById('title').value;
      if (title) formData.append('title', title);

      // Add school selection (for recruiters)
      const schoolSelectDraft = document.getElementById('schoolSelect');
      if (schoolSelectDraft && schoolSelectDraft.value) {
        console.log('Draft: School select value being submitted:', schoolSelectDraft.value);
        formData.append('fields[school][]', schoolSelectDraft.value);
      }

      const category = document.querySelector('select[name="fields[jobCategory][]"]').value;
      if (category) formData.append('fields[jobCategory][]', category);

      const description = document.getElementById('jobDescription').value;
      if (description) formData.append('fields[jobDescription]', description);

      const opportunityStatement = document.getElementById('jobOpportunityStatement').value;
      if (opportunityStatement) formData.append('fields[jobOpportunityStatement]', opportunityStatement);

      const salaryLow = document.getElementById('jobSalaryLow').value;
      if (salaryLow) formData.append('fields[jobSalaryLow]', salaryLow);

      const salaryHigh = document.getElementById('jobSalaryHigh').value;
      if (salaryHigh) formData.append('fields[jobSalaryHigh]', salaryHigh);

      const schoolUrl = document.querySelector('input[name="fields[jobSchoolUrl][value]"]').value;
      if (schoolUrl) {
        formData.append('fields[jobSchoolUrl][value]', schoolUrl);
        formData.append('fields[jobSchoolUrl][type]', 'url');
      }

      const country = document.getElementById('hiddenCountry').value;
      if (country) formData.append('fields[country]', country);

      const city = document.getElementById('hiddenJobCity').value;
      if (city) formData.append('fields[jobCity]', city);

      const state = document.getElementById('hiddenJobState').value;
      if (state) formData.append('fields[jobState]', state);

      const location = document.getElementById('hiddenJobLocation').value;
      if (location) formData.append('fields[jobLocation]', location);

      const applicationInstructions = document.getElementById('jobApplicationInstructions').value;
      if (applicationInstructions) formData.append('fields[jobApplicationInstructions]', applicationInstructions);

      // Add listingOrganization (from hidden field)
      const listingOrgFieldDraft = document.querySelector('input[name="fields[listingOrganization][]"]');
      if (listingOrgFieldDraft && listingOrgFieldDraft.value) {
        formData.append('fields[listingOrganization][]', listingOrgFieldDraft.value);
      }

      // Add school field (for schools posting their own jobs)
      const schoolFieldDraft = document.querySelector('input[name="fields[school][]"]');
      if (schoolFieldDraft && schoolFieldDraft.value) {
        formData.append('fields[school][]', schoolFieldDraft.value);
      }

      // Handle existing entry ID if continuing from draft
      const entryIdField = document.querySelector('input[name="entryId"]');
      if (entryIdField && entryIdField.value) {
        formData.append('entryId', entryIdField.value);
      }

      console.log('About to submit form data via fetch');
      console.log('Form data entries:', Array.from(formData.entries()));

      // Submit via fetch to avoid browser form validation issues
      fetch(form.action, {
        method: 'POST',
        body: formData
      }).then(response => {
        console.log('Fetch response received:', response);
        if (response.redirected) {
          window.location.href = response.url;
        } else {
          window.location.href = '{{ url("profile") }}';
        }
      }).catch(error => {
        console.error('Fetch error:', error);
        window.location.href = '{{ url("profile") }}';
      });

      // Prevent normal form submission
      return false;
    });

    // Custom validation function
    function validatePaymentForm() {
      let isValid = true;
      const errors = [];

      // Validate required fields
      const title = document.getElementById('title').value.trim();
      if (!title) {
        errors.push('Job Title is required');
        document.getElementById('title').classList.add('is-invalid');
        isValid = false;
      } else {
        document.getElementById('title').classList.remove('is-invalid');
      }

      const category = document.querySelector('select[name="fields[jobCategory][]"]').value;
      if (!category) {
        errors.push('Job Category is required');
        document.querySelector('select[name="fields[jobCategory][]"]').classList.add('is-invalid');
        isValid = false;
      } else {
        document.querySelector('select[name="fields[jobCategory][]"]').classList.remove('is-invalid');
      }

      const description = document.getElementById('jobDescription').value.trim();
      if (!description) {
        errors.push('Job Description is required');
        isValid = false;
      }

      const applicationInstructions = document.getElementById('jobApplicationInstructions').value.trim();
      if (!applicationInstructions) {
        errors.push('Application Instructions are required');
        document.getElementById('jobApplicationInstructions').classList.add('is-invalid');
        isValid = false;
      } else {
        document.getElementById('jobApplicationInstructions').classList.remove('is-invalid');
      }

      // Location validation - check hidden fields are populated
      const country = document.getElementById('hiddenCountry').value;
      if (!country) {
        errors.push('Location information is missing - please select a school');
        isValid = false;
      } else if (country === 'unitedStates') {
        const city = document.getElementById('hiddenJobCity').value;
        const state = document.getElementById('hiddenJobState').value;
        if (!city || !state) {
          errors.push('School location information is incomplete');
          isValid = false;
        }
      } else if (country === 'international') {
        const location = document.getElementById('hiddenJobLocation').value;
        if (!location) {
          errors.push('School location information is incomplete');
          isValid = false;
        }
      }


      if (!isValid && errors.length > 0) {
        // Show error message
        alert('Please fix the following errors:\n\n' + errors.join('\n'));
      }

      return isValid;
    }

    // Handle Continue to Payment button click
    const continueToPaymentBtn = document.getElementById('continueToPayment');
    if (continueToPaymentBtn) {
      continueToPaymentBtn.addEventListener('click', function(e) {
        e.preventDefault(); // Always prevent default form submission

        console.log('Continue to payment clicked');

        // Ensure CKEditor content is synced before validation
        if (jobDescriptionEditor) {
          document.querySelector('#jobDescription').value = jobDescriptionEditor.getData();
        }
        if (opportunityStatementEditor) {
          document.querySelector('#jobOpportunityStatement').value = opportunityStatementEditor.getData();
        }

        // Custom validation for payment
        if (!validatePaymentForm()) {
          return; // Stop if validation fails
        }

        console.log('Payment form validation passed, saving entry');

        // Create form data manually to avoid unwanted fields
        const formData = new FormData();

        // Add essential form fields
        formData.append('CRAFT_CSRF_TOKEN', document.querySelector('input[name="CRAFT_CSRF_TOKEN"]').value);
        formData.append('action', 'entries/save-entry');
        formData.append('sectionId', document.querySelector('input[name="sectionId"]').value);
        formData.append('typeId', document.querySelector('input[name="typeId"]').value);
        formData.append('enabled', '0');
        formData.append('fields[paid]', '0');
        formData.append('redirect', '{{ url("jobs/payment") }}');

        // Add job data fields
        const title = document.getElementById('title').value;
        if (title) formData.append('title', title);

        // Add school selection (for recruiters)
        const schoolSelect = document.getElementById('schoolSelect');
        if (schoolSelect && schoolSelect.value) {
          console.log('School select value being submitted:', schoolSelect.value);
          formData.append('fields[school][]', schoolSelect.value);
        } else {
          console.log('No school selected or schoolSelect not found');
        }

        const category = document.querySelector('select[name="fields[jobCategory][]"]').value;
        if (category) formData.append('fields[jobCategory][]', category);

        const description = document.getElementById('jobDescription').value;
        if (description) formData.append('fields[jobDescription]', description);

        const opportunityStatement = document.getElementById('jobOpportunityStatement').value;
        if (opportunityStatement) formData.append('fields[jobOpportunityStatement]', opportunityStatement);

        const salaryLow = document.getElementById('jobSalaryLow').value;
        if (salaryLow) formData.append('fields[jobSalaryLow]', salaryLow);

        const salaryHigh = document.getElementById('jobSalaryHigh').value;
        if (salaryHigh) formData.append('fields[jobSalaryHigh]', salaryHigh);

        const schoolUrl = document.querySelector('input[name="fields[jobSchoolUrl][value]"]').value;
        if (schoolUrl) {
          formData.append('fields[jobSchoolUrl][value]', schoolUrl);
          formData.append('fields[jobSchoolUrl][type]', 'url');
        }

        const country = document.getElementById('hiddenCountry').value;
        if (country) formData.append('fields[country]', country);

        const city = document.getElementById('hiddenJobCity').value;
        if (city) formData.append('fields[jobCity]', city);

        const state = document.getElementById('hiddenJobState').value;
        if (state) formData.append('fields[jobState]', state);

        const location = document.getElementById('hiddenJobLocation').value;
        if (location) formData.append('fields[jobLocation]', location);

        const applicationInstructions = document.getElementById('jobApplicationInstructions').value;
        if (applicationInstructions) formData.append('fields[jobApplicationInstructions]', applicationInstructions);

        // Add listingOrganization (from hidden field)
        const listingOrgField = document.querySelector('input[name="fields[listingOrganization][]"]');
        if (listingOrgField && listingOrgField.value) {
          formData.append('fields[listingOrganization][]', listingOrgField.value);
        }

        // Add school field (for schools posting their own jobs)
        const schoolField = document.querySelector('input[name="fields[school][]"]');
        if (schoolField && schoolField.value) {
          formData.append('fields[school][]', schoolField.value);
        }

        // Submit and redirect to payment (using exact same logic as edit.twig)
        const form = document.querySelector('form');
        fetch(form.action, {
          method: 'POST',
          body: formData
        }).then(response => {
          console.log('Entry saved, redirecting to payment');
          window.location.href = '{{ url("jobs/payment") }}';
        }).catch(error => {
          console.error('Save error:', error);
          alert('There was an error saving your job posting. Please try again.');
        });
      });
    }

    // Add New School functionality (for recruiters)
    const newSchoolCountry = document.getElementById('newSchoolCountry');
    const newSchoolUSFields = document.getElementById('newSchoolUSFields');
    const newSchoolIntlFields = document.getElementById('newSchoolIntlFields');
    const saveNewSchoolBtn = document.getElementById('saveNewSchoolBtn');

    // Show/hide location fields based on country selection
    if (newSchoolCountry) {
      newSchoolCountry.addEventListener('change', function() {
        const country = this.value;
        if (country === 'unitedStates') {
          newSchoolUSFields.style.display = 'block';
          newSchoolIntlFields.style.display = 'none';
        } else if (country === 'international') {
          newSchoolUSFields.style.display = 'none';
          newSchoolIntlFields.style.display = 'block';
        } else {
          newSchoolUSFields.style.display = 'none';
          newSchoolIntlFields.style.display = 'none';
        }
      });
    }

    // Save new school button handler
    if (saveNewSchoolBtn) {
      saveNewSchoolBtn.addEventListener('click', function() {
        const schoolName = document.getElementById('newSchoolName').value.trim();
        const schoolWebsite = document.getElementById('newSchoolWebsite').value.trim();
        const schoolCountry = document.getElementById('newSchoolCountry').value;
        const schoolCity = document.getElementById('newSchoolCity').value.trim();
        const schoolState = document.getElementById('newSchoolState').value;
        const schoolLocation = document.getElementById('newSchoolLocation').value.trim();

        // Validate required fields
        const errors = [];
        if (!schoolName) errors.push('School Name is required');
        if (!schoolCountry) errors.push('Country is required');

        if (schoolCountry === 'unitedStates') {
          if (!schoolCity) errors.push('City is required');
          if (!schoolState) errors.push('State is required');
        } else if (schoolCountry === 'international') {
          if (!schoolLocation) errors.push('Location is required');
        }

        if (errors.length > 0) {
          alert('Please correct the following errors:\n\n' + errors.join('\n'));
          return;
        }

        // Use AJAX to submit school without reloading the page
        const schoolFormData = new FormData();
        schoolFormData.append('CRAFT_CSRF_TOKEN', document.querySelector('input[name="CRAFT_CSRF_TOKEN"]').value);
        schoolFormData.append('action', 'entries/save-entry');
        schoolFormData.append('sectionId', '{{ orgSectionId }}');
        schoolFormData.append('entryTypeId', '{{ orgEntryTypeId }}');
        schoolFormData.append('enabled', '1');
        schoolFormData.append('title', schoolName);
        schoolFormData.append('fields[organizationType]', 'school');
        schoolFormData.append('fields[country]', schoolCountry);

        if (schoolWebsite) {
          let url = schoolWebsite;
          if (!url.match(/^https?:\/\//i)) {
            url = 'https://' + url;
          }
          schoolFormData.append('fields[website]', url);
        }

        if (schoolCountry === 'unitedStates') {
          schoolFormData.append('fields[orgCity]', schoolCity);
          schoolFormData.append('fields[orgState]', schoolState);
        } else if (schoolCountry === 'international') {
          schoolFormData.append('fields[orgLocation]', schoolLocation);
        }

        // Add logo file if one was selected
        const logoInput = document.getElementById('newSchoolLogo');
        if (logoInput && logoInput.files && logoInput.files.length > 0) {
          schoolFormData.append('fields[logo][]', logoInput.files[0]);
        }

        // Disable button and show loading
        saveNewSchoolBtn.disabled = true;
        saveNewSchoolBtn.innerHTML = '<span class="spinner-border spinner-border-sm me-1"></span>Saving...';

        // Submit via AJAX with JSON response
        fetch(window.location.origin, {
          method: 'POST',
          headers: {
            'Accept': 'application/json'
          },
          body: schoolFormData
        })
        .then(response => {
          console.log('Response status:', response.status);
          console.log('Response OK:', response.ok);

          // Parse JSON response
          return response.json();
        })
        .then(data => {
          console.log('JSON response:', data);

          // Extract entry ID from Craft's JSON response
          let entryId = null;

          if (data.id) {
            entryId = data.id;
          } else if (data.entry && data.entry.id) {
            entryId = data.entry.id;
          }

          console.log('Extracted entry ID:', entryId);

          return Promise.resolve({
            ok: true,
            schoolId: entryId,
            schoolName: schoolName,
            schoolCity: schoolCity,
            schoolState: schoolState,
            schoolLocation: schoolLocation,
            schoolCountry: schoolCountry
          });
        })
        .then(data => {
          // Add new school to dropdown
          const schoolSelect = document.getElementById('schoolSelect');
          const newOption = document.createElement('option');

          // Use the school data we collected
          let locationText = '';
          if (data.schoolCountry === 'unitedStates') {
            locationText = ` (${data.schoolCity}, ${data.schoolState})`;
          } else if (data.schoolCountry === 'international') {
            locationText = ` (${data.schoolLocation})`;
          }

          newOption.value = data.schoolId;
          newOption.text = data.schoolName + locationText;

          // Add data attributes for location auto-population
          newOption.setAttribute('data-country', data.schoolCountry || '');
          newOption.setAttribute('data-city', data.schoolCity || '');
          newOption.setAttribute('data-state', data.schoolState || '');
          newOption.setAttribute('data-location', data.schoolLocation || '');

          console.log('Adding school to dropdown with ID:', data.schoolId);

          // Insert alphabetically
          let inserted = false;
          for (let i = 1; i < schoolSelect.options.length; i++) {
            if (schoolSelect.options[i].text.localeCompare(newOption.text) > 0) {
              schoolSelect.add(newOption, schoolSelect.options[i]);
              inserted = true;
              break;
            }
          }
          if (!inserted) {
            schoolSelect.add(newOption);
          }

          // Set as selected AFTER adding to dropdown
          newOption.selected = true;
          console.log('School select current value after adding:', schoolSelect.value);

          // Auto-populate hidden location fields with newly created school's data
          document.getElementById('hiddenCountry').value = data.schoolCountry || '';
          if (data.schoolCountry === 'unitedStates') {
            document.getElementById('hiddenJobCity').value = data.schoolCity || '';
            document.getElementById('hiddenJobState').value = data.schoolState || '';
            document.getElementById('hiddenJobLocation').value = '';
          } else if (data.schoolCountry === 'international') {
            document.getElementById('hiddenJobCity').value = '';
            document.getElementById('hiddenJobState').value = '';
            document.getElementById('hiddenJobLocation').value = data.schoolLocation || '';
          }

          // Clear the form
          document.getElementById('newSchoolName').value = '';
          document.getElementById('newSchoolWebsite').value = '';
          document.getElementById('newSchoolCountry').value = '';
          document.getElementById('newSchoolCity').value = '';
          document.getElementById('newSchoolState').value = '';
          document.getElementById('newSchoolLocation').value = '';
          document.getElementById('newSchoolLogo').value = '';
          newSchoolUSFields.style.display = 'none';
          newSchoolIntlFields.style.display = 'none';

          // Collapse the form
          const collapseElement = document.getElementById('addSchoolCollapse');
          const bsCollapse = bootstrap.Collapse.getInstance(collapseElement) || new bootstrap.Collapse(collapseElement, {toggle: false});
          bsCollapse.hide();

          // Show success
          alert('School added successfully and selected!');
        })
        .catch(error => {
          console.error('Error creating school:', error);
          alert('There was an error creating the school. Please try again.');
        })
        .finally(() => {
          // Re-enable button
          saveNewSchoolBtn.disabled = false;
          saveNewSchoolBtn.innerHTML = '<i class="bi bi-check-circle me-1"></i>Save School & Continue';
        });
      });
    }
  });
  </script>
  {% endif %}
{% endblock %}